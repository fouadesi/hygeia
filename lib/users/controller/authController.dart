import 'dart:async';import 'dart:convert';import 'dart:io';import 'package:flutter/material.dart';import 'package:http/http.dart';import 'package:hygeia/users/controller/userPreferences.dart';import 'package:hygeia/users/data/const/const.server.dart';import 'package:hygeia/users/data/model/patient.dart';import 'package:hygeia/users/view/auth/component/message.error.dart';import 'package:jwt_decode/jwt_decode.dart';enum Status {  NotLoggedIn,  NotRegistered,  LoggedIn,  Registered,  Authenticating,  Registering,  LoggedOut}class AuthProvider with ChangeNotifier {  Status _loggedInStatus = Status.NotLoggedIn;  Status _registeredInStatus = Status.NotRegistered;  Status get loggedInStatus => _loggedInStatus;  Status get registeredInStatus => _registeredInStatus;  Future<Map<String, dynamic>> login(String email, String password) async {    var result;    final Map<String, dynamic> loginData = {        'email': email,        'password': password      };    _loggedInStatus = Status.Authenticating;    notifyListeners();    Response response = await post(      Uri.parse(url+"users/patient/login"),      body: loginData,    );    final Map<String, dynamic> responseData = json.decode(response.body);    print(responseData);String token  = responseData['token'];    Map<String, dynamic> payload = Jwt.parseJwt(token);    print(payload);    if (response.statusCode == 200) {      final Map<String, dynamic> responseData = json.decode(response.body);      var userData = responseData;      Patient authUser = Patient.fromJson(payload);      UserPreferences().saveUser(authUser);      _loggedInStatus = Status.LoggedIn;      notifyListeners();      result = {'status': true, 'message': 'Successful', 'user': authUser};    } else {      _loggedInStatus = Status.NotLoggedIn;      notifyListeners();      result = {        'status': false,        'message': json.decode(response.body)['error']      };    }    return result;  }  UpdateAccount(Patient p , BuildContext context)  async {    print(p);    final Map<String, dynamic> UpdateData = p.toMap();    Response response = await post(      Uri.parse(url+"users/patient/updateProfile"),      body: UpdateData,    );    print("here");    showSuccesMessage("Modification effectué avec succées", context);  }Future<String>  UpdatePicture(String image , String email , BuildContext context)  async {    final Map<String, dynamic> UpdateData = {    "email" : email ,    "image" : image,  };    Response response = await post(      Uri.parse(url+"users/patient/uploadPicture"),      body: UpdateData,    );   return response.body ;  }}